{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,EAAM,aAAa,CAAC,SAC5B,EAAQ,EAAG,EAAM,gBAAgB,CAAC,OAElC,EAAO,SAAS,aAAa,CAAC,QAEpC,EAAK,SAAS,CAAC,GAAG,CAAC,qBAsCnB,AApCmB,CACjB,CACE,KAAM,OACN,KAAM,OACN,OAAQ,MACV,EACA,CACE,KAAM,WACN,KAAM,OACN,OAAQ,UACV,EACA,CACE,KAAM,SACN,KAAM,SACN,OAAQ,SACR,QAAS,CACP,QACA,YACA,SACA,WACA,YACA,gBACD,AACH,EACA,CACE,KAAM,MACN,KAAM,SACN,OAAQ,KACV,EACA,CACE,KAAM,SACN,KAAM,SACN,OAAQ,QACV,EACD,CAEU,OAAO,CAAC,SAAnB,CAAA,EAAsB,IAAA,EAAA,EAAA,IAAA,CAAM,EAAA,EAAA,IAAA,CAAM,EAAA,EAAA,MAAA,CAAQ,EAAA,EAAA,OAApB,CACd,EAAQ,SAAS,aAAa,CAAC,SAC/B,EACJ,AAAS,WAAT,EACI,SAAS,aAAa,CAAC,UACvB,SAAS,aAAa,CAAC,QAEhB,CAAA,WAAT,GACF,CAAA,EAAM,IAAI,CAAG,CADf,EAIA,EAAM,IAAI,CAAG,EACb,EAAM,YAAY,CAAC,UAAW,GAEjB,WAAT,GACF,EAAQ,OAAO,CAAC,SAAC,CADnB,EAEI,IAAM,EAAgB,SAAS,aAAa,CAAC,SAE7C,CAAA,EAAc,KAAK,CAAG,EACtB,EAAc,WAAW,CAAG,EAC5B,EAAM,WAAW,CAAC,EACpB,GAG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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tbody = table.querySelector(\"tbody\");\nvar rows = _to_consumable_array(tbody.querySelectorAll(\"tr\"));\nvar form = document.createElement(\"form\");\nform.classList.add(\"new-employee-form\");\nvar formLabels = [\n    {\n        text: \"Name\",\n        type: \"text\",\n        dataQa: \"name\"\n    },\n    {\n        text: \"Position\",\n        type: \"text\",\n        dataQa: \"position\"\n    },\n    {\n        text: \"Office\",\n        type: \"select\",\n        dataQa: \"office\",\n        options: [\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    {\n        text: \"Age\",\n        type: \"number\",\n        dataQa: \"age\"\n    },\n    {\n        text: \"Salary\",\n        type: \"number\",\n        dataQa: \"salary\"\n    }\n];\nformLabels.forEach(function(param) {\n    var text = param.text, type = param.type, dataQa = param.dataQa, options = param.options;\n    var label = document.createElement(\"label\");\n    var input = type === \"select\" ? document.createElement(\"select\") : document.createElement(\"input\");\n    if (type !== \"select\") input.type = type;\n    input.name = dataQa;\n    input.setAttribute(\"data-qa\", dataQa);\n    if (type === \"select\") options.forEach(function(option) {\n        var optionElement = document.createElement(\"option\");\n        optionElement.value = option;\n        optionElement.textContent = option;\n        input.appendChild(optionElement);\n    });\n    label.textContent = \"\".concat(text, \": \");\n    label.appendChild(input);\n    form.appendChild(label);\n});\nvar submitButton = document.createElement(\"button\");\nsubmitButton.type = \"submit\";\nsubmitButton.textContent = \"Save to table\";\nform.appendChild(submitButton);\ndocument.body.appendChild(form);\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = new FormData(e.target);\n    var nameEmployee = formData.get(\"name\");\n    var position = formData.get(\"position\");\n    var office = formData.get(\"office\");\n    var age = formData.get(\"age\");\n    var salary = formData.get(\"salary\");\n    if (!nameEmployee.trim().length) {\n        createNotification(\"Invalid Name\", \"Name is required\", \"error\");\n        return;\n    }\n    if (nameEmployee.trim().length < 4) {\n        createNotification(\"Invalid Name\", \"Name should be at least 4 characters long.\", \"error\");\n        return;\n    }\n    if (!position.trim().length) {\n        createNotification(\"Invalid Position\", \"Position is required\", \"error\");\n        return;\n    }\n    if (age < 18 || age > 90) {\n        createNotification(\"Invalid Age\", \"Age should be between 18 and 90.\", \"error\");\n        return;\n    }\n    if (!salary.trim().length) {\n        createNotification(\"Invalid Salary\", \"Salary is required\", \"error\");\n        return;\n    }\n    var newRow = document.createElement(\"tr\");\n    var salaryFormatted = \"$\".concat(parseFloat(salary).toLocaleString(\"en-US\"));\n    newRow.innerHTML = \"\\n    <td>\".concat(nameEmployee, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>\").concat(salaryFormatted, \"</td>\\n  \");\n    tbody.appendChild(newRow);\n    e.target.reset();\n    createNotification(\"Success\", \"New employee added to the table.\", \"success\");\n    addEditingFunctionality(newRow);\n});\nfunction createNotification(title, description, type) {\n    var existingNotifications = document.querySelectorAll('[data-qa=\"notification\"]');\n    existingNotifications.forEach(function(notification) {\n        return notification.remove();\n    });\n    var notificationElement = document.createElement(\"div\");\n    var titleElement = document.createElement(\"h2\");\n    var descriptionElement = document.createElement(\"p\");\n    notificationElement.dataset.qa = \"notification\";\n    notificationElement.classList.add(\"notification\", type);\n    titleElement.classList.add(\"title\");\n    titleElement.textContent = title;\n    descriptionElement.textContent = description;\n    notificationElement.appendChild(titleElement);\n    notificationElement.appendChild(descriptionElement);\n    document.body.appendChild(notificationElement);\n    setTimeout(function() {\n        notificationElement.style.visibility = \"hidden\";\n    }, 2000);\n}\nvar saveChanges = function(input, initialValue) {\n    if (input) {\n        var newValue = input.value.trim();\n        if (newValue === \"\") input.parentNode.textContent = initialValue;\n        else input.parentNode.textContent = newValue;\n        input.remove();\n    }\n};\nvar sortOrder = {};\nvar sortTable = function(columnIndex, sortBy) {\n    var rowsForSort = _to_consumable_array(tbody.querySelectorAll(\"tr\"));\n    rowsForSort.sort(function(row1, row2) {\n        var value1 = row1.children[columnIndex].textContent;\n        var value2 = row2.children[columnIndex].textContent;\n        switch(sortBy){\n            case \"Name\":\n            case \"Position\":\n            case \"Office\":\n                return value1.localeCompare(value2) * sortOrder[columnIndex];\n            case \"Age\":\n                return (value1 - value2) * sortOrder[columnIndex];\n            case \"Salary\":\n                var salary1 = parseFloat(value1.replace(/[$,]/g, \"\"));\n                var salary2 = parseFloat(value2.replace(/[$,]/g, \"\"));\n                return (salary1 - salary2) * sortOrder[columnIndex];\n            default:\n                return 0;\n        }\n    });\n    rowsForSort.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n};\ntable.querySelectorAll(\"th\").forEach(function(th, index) {\n    th.addEventListener(\"click\", function() {\n        var sortBy = th.textContent;\n        sortOrder[index] = sortOrder[index] === 1 ? -1 : 1;\n        sortTable(index, sortBy);\n    });\n});\nfunction addEditingFunctionality(row) {\n    row.addEventListener(\"click\", function() {\n        rows.forEach(function(r) {\n            r.classList.remove(\"active\");\n        });\n        row.classList.add(\"active\");\n    });\n    var cells = row.querySelectorAll(\"td\");\n    cells.forEach(function(cell) {\n        var cellInput = null;\n        var initialValue = cell.textContent;\n        cell.addEventListener(\"dblclick\", function() {\n            if (cellInput) {\n                saveChanges(cellInput, initialValue);\n                cellInput = null;\n            } else {\n                var input = document.createElement(\"input\");\n                input.value = initialValue;\n                input.classList.add(\"cell-input\");\n                cell.textContent = \"\";\n                cell.appendChild(input);\n                input.focus();\n                cellInput = input;\n                input.addEventListener(\"blur\", function() {\n                    saveChanges(input, initialValue);\n                    cellInput = null;\n                });\n                input.addEventListener(\"keydown\", function(e) {\n                    if (e.key === \"Enter\") {\n                        saveChanges(input, initialValue);\n                        cellInput = null;\n                    }\n                });\n            }\n        });\n    });\n}\nrows.forEach(addEditingFunctionality);\n\n//# sourceMappingURL=index.6ccdcc6c.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst rows = [...tbody.querySelectorAll('tr')];\n\nconst form = document.createElement('form');\n\nform.classList.add('new-employee-form');\n\nconst formLabels = [\n  {\n    text: 'Name',\n    type: 'text',\n    dataQa: 'name',\n  },\n  {\n    text: 'Position',\n    type: 'text',\n    dataQa: 'position',\n  },\n  {\n    text: 'Office',\n    type: 'select',\n    dataQa: 'office',\n    options: [\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n  {\n    text: 'Age',\n    type: 'number',\n    dataQa: 'age',\n  },\n  {\n    text: 'Salary',\n    type: 'number',\n    dataQa: 'salary',\n  },\n];\n\nformLabels.forEach(({ text, type, dataQa, options }) => {\n  const label = document.createElement('label');\n  const input =\n    type === 'select'\n      ? document.createElement('select')\n      : document.createElement('input');\n\n  if (type !== 'select') {\n    input.type = type;\n  }\n\n  input.name = dataQa;\n  input.setAttribute('data-qa', dataQa);\n\n  if (type === 'select') {\n    options.forEach((option) => {\n      const optionElement = document.createElement('option');\n\n      optionElement.value = option;\n      optionElement.textContent = option;\n      input.appendChild(optionElement);\n    });\n  }\n\n  label.textContent = `${text}: `;\n  label.appendChild(input);\n  form.appendChild(label);\n});\n\nconst submitButton = document.createElement('button');\n\nsubmitButton.type = 'submit';\nsubmitButton.textContent = 'Save to table';\nform.appendChild(submitButton);\n\ndocument.body.appendChild(form);\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(e.target);\n  const nameEmployee = formData.get('name');\n  const position = formData.get('position');\n  const office = formData.get('office');\n  const age = formData.get('age');\n  const salary = formData.get('salary');\n\n  if (!nameEmployee.trim().length) {\n    createNotification('Invalid Name', 'Name is required', 'error');\n\n    return;\n  }\n\n  if (nameEmployee.trim().length < 4) {\n    createNotification(\n      'Invalid Name',\n      'Name should be at least 4 characters long.',\n      'error',\n    );\n\n    return;\n  }\n\n  if (!position.trim().length) {\n    createNotification('Invalid Position', 'Position is required', 'error');\n\n    return;\n  }\n\n  if (age < 18 || age > 90) {\n    createNotification(\n      'Invalid Age',\n      'Age should be between 18 and 90.',\n      'error',\n    );\n\n    return;\n  }\n\n  if (!salary.trim().length) {\n    createNotification('Invalid Salary', 'Salary is required', 'error');\n\n    return;\n  }\n\n  const newRow = document.createElement('tr');\n  const salaryFormatted = `$${parseFloat(salary).toLocaleString('en-US')}`;\n\n  newRow.innerHTML = `\n    <td>${nameEmployee}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>${salaryFormatted}</td>\n  `;\n\n  tbody.appendChild(newRow);\n  e.target.reset();\n  createNotification('Success', 'New employee added to the table.', 'success');\n\n  addEditingFunctionality(newRow);\n});\n\nfunction createNotification(title, description, type) {\n  const existingNotifications = document.querySelectorAll(\n    '[data-qa=\"notification\"]',\n  );\n\n  existingNotifications.forEach((notification) => notification.remove());\n\n  const notificationElement = document.createElement('div');\n  const titleElement = document.createElement('h2');\n  const descriptionElement = document.createElement('p');\n\n  notificationElement.dataset.qa = 'notification';\n  notificationElement.classList.add('notification', type);\n  titleElement.classList.add('title');\n  titleElement.textContent = title;\n  descriptionElement.textContent = description;\n\n  notificationElement.appendChild(titleElement);\n  notificationElement.appendChild(descriptionElement);\n  document.body.appendChild(notificationElement);\n\n  setTimeout(() => {\n    notificationElement.style.visibility = 'hidden';\n  }, 2000);\n}\n\nconst saveChanges = (input, initialValue) => {\n  if (input) {\n    const newValue = input.value.trim();\n\n    if (newValue === '') {\n      input.parentNode.textContent = initialValue;\n    } else {\n      input.parentNode.textContent = newValue;\n    }\n    input.remove();\n  }\n};\n\nconst sortOrder = {};\nconst sortTable = (columnIndex, sortBy) => {\n  const rowsForSort = [...tbody.querySelectorAll('tr')];\n\n  rowsForSort.sort((row1, row2) => {\n    const value1 = row1.children[columnIndex].textContent;\n    const value2 = row2.children[columnIndex].textContent;\n\n    switch (sortBy) {\n      case 'Name':\n      case 'Position':\n      case 'Office':\n        return value1.localeCompare(value2) * sortOrder[columnIndex];\n      case 'Age':\n        return (value1 - value2) * sortOrder[columnIndex];\n      case 'Salary':\n        const salary1 = parseFloat(value1.replace(/[$,]/g, ''));\n        const salary2 = parseFloat(value2.replace(/[$,]/g, ''));\n\n        return (salary1 - salary2) * sortOrder[columnIndex];\n      default:\n        return 0;\n    }\n  });\n  rowsForSort.forEach((row) => tbody.appendChild(row));\n};\n\ntable.querySelectorAll('th').forEach((th, index) => {\n  th.addEventListener('click', () => {\n    const sortBy = th.textContent;\n\n    sortOrder[index] = sortOrder[index] === 1 ? -1 : 1;\n    sortTable(index, sortBy);\n  });\n});\n\nfunction addEditingFunctionality(row) {\n  row.addEventListener('click', () => {\n    rows.forEach((r) => {\n      r.classList.remove('active');\n    });\n    row.classList.add('active');\n  });\n\n  const cells = row.querySelectorAll('td');\n\n  cells.forEach((cell) => {\n    let cellInput = null;\n    const initialValue = cell.textContent;\n\n    cell.addEventListener('dblclick', () => {\n      if (cellInput) {\n        saveChanges(cellInput, initialValue);\n        cellInput = null;\n      } else {\n        const input = document.createElement('input');\n\n        input.value = initialValue;\n        input.classList.add('cell-input');\n        cell.textContent = '';\n        cell.appendChild(input);\n        input.focus();\n        cellInput = input;\n\n        input.addEventListener('blur', () => {\n          saveChanges(input, initialValue);\n          cellInput = null;\n        });\n\n        input.addEventListener('keydown', (e) => {\n          if (e.key === 'Enter') {\n            saveChanges(input, initialValue);\n            cellInput = null;\n          }\n        });\n      }\n    });\n  });\n}\n\nrows.forEach(addEditingFunctionality);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","tbody","rows","querySelectorAll","form","createElement","classList","add","formLabels","text","type","dataQa","options","forEach","param","label","input","setAttribute","option","optionElement","value","textContent","appendChild","concat","submitButton","createNotification","title","description","existingNotifications","notification","remove","notificationElement","titleElement","descriptionElement","dataset","qa","body","setTimeout","style","visibility","addEventListener","e","preventDefault","formData","FormData","target","nameEmployee","get","position","office","age","salary","trim","newRow","salaryFormatted","parseFloat","toLocaleString","innerHTML","reset","addEditingFunctionality","saveChanges","initialValue","newValue","parentNode","sortOrder","sortTable","columnIndex","sortBy","rowsForSort","sort","row1","row2","value1","children","value2","localeCompare","salary1","replace","row","r","cells","cell","cellInput","focus","key","th","index"],"version":3,"file":"index.6ccdcc6c.js.map"}